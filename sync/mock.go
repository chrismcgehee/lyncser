// Code generated by MockGen. DO NOT EDIT.
// Source: utils/file_store.go

// Package mock_utils is a generated GoMock package.
package sync

import (
	reflect "reflect"
	time "time"

	utils "github.com/chrismcgehee/lyncser/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockFileStore is a mock of FileStore interface.
type MockFileStore struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoreMockRecorder
}

// MockFileStoreMockRecorder is the mock recorder for MockFileStore.
type MockFileStoreMockRecorder struct {
	mock *MockFileStore
}

// NewMockFileStore creates a new mock instance.
func NewMockFileStore(ctrl *gomock.Controller) *MockFileStore {
	mock := &MockFileStore{ctrl: ctrl}
	mock.recorder = &MockFileStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStore) EXPECT() *MockFileStoreMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockFileStore) CreateFile(path utils.SyncedFile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateFile", path)
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockFileStoreMockRecorder) CreateFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockFileStore)(nil).CreateFile), path)
}

// DownloadFile mocks base method.
func (m *MockFileStore) DownloadFile(path utils.SyncedFile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownloadFile", path)
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileStoreMockRecorder) DownloadFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileStore)(nil).DownloadFile), path)
}

// FileExistsCloud mocks base method.
func (m *MockFileStore) FileExistsCloud(path utils.SyncedFile) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileExistsCloud", path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FileExistsCloud indicates an expected call of FileExistsCloud.
func (mr *MockFileStoreMockRecorder) FileExistsCloud(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileExistsCloud", reflect.TypeOf((*MockFileStore)(nil).FileExistsCloud), path)
}

// GetCloudModifiedTime mocks base method.
func (m *MockFileStore) GetCloudModifiedTime(path utils.SyncedFile) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudModifiedTime", path)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCloudModifiedTime indicates an expected call of GetCloudModifiedTime.
func (mr *MockFileStoreMockRecorder) GetCloudModifiedTime(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudModifiedTime", reflect.TypeOf((*MockFileStore)(nil).GetCloudModifiedTime), path)
}

// Initialize mocks base method.
func (m *MockFileStore) Initialize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Initialize")
}

// Initialize indicates an expected call of Initialize.
func (mr *MockFileStoreMockRecorder) Initialize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockFileStore)(nil).Initialize))
}

// UpdateFile mocks base method.
func (m *MockFileStore) UpdateFile(path utils.SyncedFile) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateFile", path)
}

// UpdateFile indicates an expected call of UpdateFile.
func (mr *MockFileStoreMockRecorder) UpdateFile(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFile", reflect.TypeOf((*MockFileStore)(nil).UpdateFile), path)
}
