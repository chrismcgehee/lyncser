// Code generated by MockGen. DO NOT EDIT.
// Source: utils/reader_encryptor.go

// Package sync is a generated GoMock package.
package sync

import (
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReaderEncryptor is a mock of ReaderEncryptor interface.
type MockReaderEncryptor struct {
	ctrl     *gomock.Controller
	recorder *MockReaderEncryptorMockRecorder
}

// MockReaderEncryptorMockRecorder is the mock recorder for MockReaderEncryptor.
type MockReaderEncryptorMockRecorder struct {
	mock *MockReaderEncryptor
}

// NewMockReaderEncryptor creates a new mock instance.
func NewMockReaderEncryptor(ctrl *gomock.Controller) *MockReaderEncryptor {
	mock := &MockReaderEncryptor{ctrl: ctrl}
	mock.recorder = &MockReaderEncryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReaderEncryptor) EXPECT() *MockReaderEncryptorMockRecorder {
	return m.recorder
}

// DecryptReader mocks base method.
func (m *MockReaderEncryptor) DecryptReader(reader io.ReadCloser) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptReader", reader)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptReader indicates an expected call of DecryptReader.
func (mr *MockReaderEncryptorMockRecorder) DecryptReader(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptReader", reflect.TypeOf((*MockReaderEncryptor)(nil).DecryptReader), reader)
}

// EncryptReader mocks base method.
func (m *MockReaderEncryptor) EncryptReader(reader io.Reader) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptReader", reader)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncryptReader indicates an expected call of EncryptReader.
func (mr *MockReaderEncryptorMockRecorder) EncryptReader(reader interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptReader", reflect.TypeOf((*MockReaderEncryptor)(nil).EncryptReader), reader)
}
